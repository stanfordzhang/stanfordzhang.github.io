{"meta":{"title":"Stanford","subtitle":"Stanford's Home","description":"一蓑烟雨任平生","author":"Stanford Zhang","url":"http://yoursite.com"},"pages":[{"title":"关于","date":"2017-01-04T09:17:58.000Z","updated":"2017-01-04T09:24:02.000Z","comments":true,"path":"about/index.html","permalink":"http://yoursite.com/about/index.html","excerpt":"","text":""}],"posts":[{"title":"Install Nessus on Kali Linux","slug":"Install Nessus on Kali Linux","date":"2018-05-21T11:46:21.000Z","updated":"2018-05-21T11:51:03.032Z","comments":true,"path":"2018/05/21/Install Nessus on Kali Linux/","link":"","permalink":"http://yoursite.com/2018/05/21/Install Nessus on Kali Linux/","excerpt":"Nessus是什么？ Nessus号称是世界上最流行的漏洞扫描程序，全世界有超过75000个组织在使用它。该工具提供完整的电脑漏洞扫描服务，并随时更新其漏洞数据库。Nessus不同于传统的漏洞扫描软件，Nessus可同时在本机或远程操作，进行系统的漏洞分析扫描。","text":"Nessus是什么？ Nessus号称是世界上最流行的漏洞扫描程序，全世界有超过75000个组织在使用它。该工具提供完整的电脑漏洞扫描服务，并随时更新其漏洞数据库。Nessus不同于传统的漏洞扫描软件，Nessus可同时在本机或远程操作，进行系统的漏洞分析扫描。 下载并安装根据不同的OS下载不同的版本，Kali Linux下载debian 6版本的Nessus。 1https://www.tenable.com/downloads/nessus 安装命令： root@kali:~/Documents# dpkg -i Nessus-7.1.0-debian6_amd64.debSelecting previously unselected package nessus.(Reading database … 335227 files and directories currently installed.)Preparing to unpack Nessus-7.1.0-debian6_amd64.deb …Unpacking nessus (7.1.0) …Setting up nessus (7.1.0) …Unpacking Nessus Core Components… You can start Nessus by typing /etc/init.d/nessusd start Then go to https://kali:8834/ to configure your scanner Processing triggers for systemd (238-4) … 显示到这里就安装成功了！ 启动Nessus 1/etc/init.d/nessusd start 激活注册领取免费版本的激活码，领取之后会发送到邮件，注意查看邮箱。 1https://www.tenable.com/products/nessus/activation-code 使用激活码激活 1/opt/nessus/sbin/nessuscli fetch --register 0BB7-F54A-60D7-FCE7-976E 激活过程中会下载安装Plugins，稍作等待。 添加账号这里都使用默认配置： 123456789101112131415161718192021root@kali:~/Documents# /opt/nessus/sbin/nessuscli adduser root[Mon May 21 06:42:52 2018][2752.1] _qdb_open:/opt/nessus/var/nessus/plugins-desc.db: Invalid table of contentsLogin password:Login password (again):Do you want this user to be a Nessus 'system administrator' user (can upload plugins, etc.)? (y/n) [n]: yUser rules----------nessusd has a rules system which allows you to restrict the hoststhat root has the right to test. For instance, you may wanthim to be able to scan his own host only.Please see the Nessus Command Line Reference for the rules syntaxEnter the rules for this user, and enter a BLANK LINE once you are done :(the user can have an empty rules set)Login : rootPassword : ***********This user will have 'system administrator' privileges within the Nessus serverIs that ok? (y/n) [n]: yUser added 访问控制界面重启Nessus服务 1/etc/init.d/nessusd restart 打开浏览器访问，默认端口是8834。 1https://10.98.53.137:8834 References 《Kali Linux渗透测试技术详解》","categories":[],"tags":[{"name":"Kali Linux","slug":"Kali-Linux","permalink":"http://yoursite.com/tags/Kali-Linux/"},{"name":"Nessus","slug":"Nessus","permalink":"http://yoursite.com/tags/Nessus/"},{"name":"Security","slug":"Security","permalink":"http://yoursite.com/tags/Security/"}]},{"title":"XCode设置Build Number自增","slug":"XCode设置Build-Number自增","date":"2017-11-30T09:46:21.000Z","updated":"2017-11-30T09:53:56.000Z","comments":true,"path":"2017/11/30/XCode设置Build-Number自增/","link":"","permalink":"http://yoursite.com/2017/11/30/XCode设置Build-Number自增/","excerpt":"CocoaPods是什么？ 在提交iOS应用时，相同的Build Number是无法重复上传的。如果每次都要手动修改版本号，比较低效和容易出错。所以这里介绍一种自动增加Build Number的方法。","text":"CocoaPods是什么？ 在提交iOS应用时，相同的Build Number是无法重复上传的。如果每次都要手动修改版本号，比较低效和容易出错。所以这里介绍一种自动增加Build Number的方法。 References https://crunchybagel.com/auto-incrementing-build-numbers-in-xcode/","categories":[],"tags":[{"name":"macOS","slug":"macOS","permalink":"http://yoursite.com/tags/macOS/"},{"name":"iOS","slug":"iOS","permalink":"http://yoursite.com/tags/iOS/"},{"name":"XCode","slug":"XCode","permalink":"http://yoursite.com/tags/XCode/"}]},{"title":"macOS设置不在Dock上显示App图标","slug":"macOS设置不在Dock上显示App图标","date":"2016-10-09T08:43:30.000Z","updated":"2017-11-22T08:44:35.000Z","comments":true,"path":"2016/10/09/macOS设置不在Dock上显示App图标/","link":"","permalink":"http://yoursite.com/2016/10/09/macOS设置不在Dock上显示App图标/","excerpt":"","text":"在Info.Plist里设置：LSUIElement是以Agent的方法启动。不在Dock上显示图标，但会显示窗口。LSBackgroundOnly变成后台进程，不在Dock上显示图标，也不会显示窗口。 TransformProcessType[NSApp setActivationPolicy: NSApplicationActivationPolicyAccessory];以上两个没有研究。 Reference: https://developer.apple.com/library/content/documentation/General/Reference/InfoPlistKeyReference/Articles/LaunchServicesKeys.html#//apple_ref/doc/uid/20001431-113253 http://stackoverflow.com/questions/6796028/start-a-gui-process-in-mac-os-x-without-dock-icon/9220840 http://stackoverflow.com/questions/620841/how-to-hide-the-dock-icon","categories":[],"tags":[{"name":"macOS","slug":"macOS","permalink":"http://yoursite.com/tags/macOS/"}]},{"title":"Git代理设置（macOS）","slug":"Git代理设置（macOS）","date":"2016-08-29T08:41:50.000Z","updated":"2017-11-22T08:44:15.000Z","comments":true,"path":"2016/08/29/Git代理设置（macOS）/","link":"","permalink":"http://yoursite.com/2016/08/29/Git代理设置（macOS）/","excerpt":"","text":"最近要在https://chromium.googlesource.com/ Checkout点代码，但该网站被GFW墙了。无奈只能走野路子。 使用socks5通道： 首先通过如下命令登录一台未被墙的服务器： ssh root@IP地址或域名 -D 端口修改Git的配置（~/.gitconfig），新增如下行： [http]proxy = socks5://127.0.0.1:\b端口这样Git将走代理通道。 Reference:1：为Git配置代理","categories":[],"tags":[{"name":"macOS","slug":"macOS","permalink":"http://yoursite.com/tags/macOS/"}]},{"title":"iOS/macOS签名证书类型","slug":"iOS-macOS签名证书类型","date":"2016-08-24T08:38:26.000Z","updated":"2017-11-22T08:52:46.000Z","comments":true,"path":"2016/08/24/iOS-macOS签名证书类型/","link":"","permalink":"http://yoursite.com/2016/08/24/iOS-macOS签名证书类型/","excerpt":"","text":"Reference https://developer.apple.com/library/mac/documentation/IDEs/Conceptual/AppDistributionGuide/MaintainingCertificates/MaintainingCertificates.html#//apple_ref/doc/uid/TP40012582-CH31-SW41 http://stackoverflow.com/questions/13196291/difference-between-mac-developer-and-3rd-party-mac-developer-application","categories":[],"tags":[{"name":"macOS","slug":"macOS","permalink":"http://yoursite.com/tags/macOS/"},{"name":"iOS","slug":"iOS","permalink":"http://yoursite.com/tags/iOS/"}]},{"title":"Kali Linux 2016.1 中科大源","slug":"Kali-Linux-2016-1-中科大源","date":"2016-08-22T08:35:41.000Z","updated":"2017-11-22T08:59:02.000Z","comments":true,"path":"2016/08/22/Kali-Linux-2016-1-中科大源/","link":"","permalink":"http://yoursite.com/2016/08/22/Kali-Linux-2016-1-中科大源/","excerpt":"","text":"修改 /etc/apt/sources.list1234#kali官方源deb http://http.kali.org/kali kali-rolling main non-free contrib#中科大的源deb http://mirrors.ustc.edu.cn/kali kali-rolling main non-free contrib 依次执行下面命令：123apt-get update &amp; apt-get upgradeapt-get dist-upgradereboot","categories":[],"tags":[{"name":"随笔","slug":"随笔","permalink":"http://yoursite.com/tags/随笔/"}]},{"title":"How To Set Up SSH Tunneling on a VPS","slug":"How-To-Set-Up-SSH-Tunneling-on-a-VPS","date":"2016-06-01T08:34:03.000Z","updated":"2017-11-22T08:36:26.000Z","comments":true,"path":"2016/06/01/How-To-Set-Up-SSH-Tunneling-on-a-VPS/","link":"","permalink":"http://yoursite.com/2016/06/01/How-To-Set-Up-SSH-Tunneling-on-a-VPS/","excerpt":"","text":"How To Set Up SSH Tunneling on a VPS使用SSH隧道进行翻墙。 ##Reference: https://www.digitalocean.com/community/tutorials/how-to-set-up-ssh-tunneling-on-a-vps","categories":[],"tags":[{"name":"随笔","slug":"随笔","permalink":"http://yoursite.com/tags/随笔/"}]},{"title":"Mac OS X快速安装Apache Thrift","slug":"Mac-OS-X快速安装Apache-Thrift","date":"2016-05-26T10:55:07.000Z","updated":"2017-11-22T08:54:18.000Z","comments":true,"path":"2016/05/26/Mac-OS-X快速安装Apache-Thrift/","link":"","permalink":"http://yoursite.com/2016/05/26/Mac-OS-X快速安装Apache-Thrift/","excerpt":"介绍Thrift 最初由Facebook开发，而后捐献给Apache，目前已广泛应用于业界。Thrift 正如其官方主页介绍的，“是一种可扩展、跨语言的服务开发框架”。简而言之，它主要用于各个服务之间的RPC通信，其服务端和客户端可以用不同的语言来开发。只需要依照IDL（Interface Description Language）定义一次接口，Thrift工具就能自动生成 C++, Java, Python, PHP, Ruby, Erlang, Perl, Haskell, C#, Cocoa, JavaScript, Node.js, Smalltalk, and OCaml等语言的代码。","text":"介绍Thrift 最初由Facebook开发，而后捐献给Apache，目前已广泛应用于业界。Thrift 正如其官方主页介绍的，“是一种可扩展、跨语言的服务开发框架”。简而言之，它主要用于各个服务之间的RPC通信，其服务端和客户端可以用不同的语言来开发。只需要依照IDL（Interface Description Language）定义一次接口，Thrift工具就能自动生成 C++, Java, Python, PHP, Ruby, Erlang, Perl, Haskell, C#, Cocoa, JavaScript, Node.js, Smalltalk, and OCaml等语言的代码。 安装Thrift的安装还是有些繁琐的，跟着官方文档的走就可以。如果你是Mac OS X， 这里有更方便的方法。brew install boostbrew install libeventbrew install thriftgem install thrift – –with-cppflags=’-D_FORTIFY_SOURCE=0’ 不过注意上述方法默认安装的最新版。 QAError: The brew link step did not complete successfullyThe formula built, but is not symlinked into /usr/localYou can try again using `brew link thrift’ 如果报以上错误，再手动运行：brew link thrift 即可。 * Reference https://wuchong.me/blog/2015/10/07/thrift-induction/ https://diwakergupta.github.io/thrift-missing-guide/ http://thrift-tutorial.readthedocs.io/en/latest/index.html http://www.jianshu.com/p/0f4113d6ec4b","categories":[],"tags":[{"name":"macOS","slug":"macOS","permalink":"http://yoursite.com/tags/macOS/"}]},{"title":"Linux/OSX 命令输入操作快捷键","slug":"Linux-OSX-命令输入操作快捷键","date":"2016-05-17T10:54:26.000Z","updated":"2017-11-22T08:55:02.000Z","comments":true,"path":"2016/05/17/Linux-OSX-命令输入操作快捷键/","link":"","permalink":"http://yoursite.com/2016/05/17/Linux-OSX-命令输入操作快捷键/","excerpt":"","text":"ctrl + w —往回删除一个单词，光标放在最末尾ctrl + k —往前删除到末尾，光标放在最前面（可以使用ctrl+a）ctl + u 删除光标以前的字符ctl + k 删除光标以后的字符ctl + a 移动光标至的字符头ctl + e 移动光标至的字符尾ctl + l 清屏 ctrl + r命令历史，继续按这个快捷键可以向前翻","categories":[],"tags":[]},{"title":"Linux/OSX 统计文件个数命令","slug":"Linux-OSX-统计文件个数命令","date":"2016-05-17T10:52:28.000Z","updated":"2017-11-22T08:55:46.000Z","comments":true,"path":"2016/05/17/Linux-OSX-统计文件个数命令/","link":"","permalink":"http://yoursite.com/2016/05/17/Linux-OSX-统计文件个数命令/","excerpt":"","text":"命令如下：1find &lt;目录&gt; -type f | wc -l 根据目录路径，显示文件个数，不包括目录。 例如：统计全盘文件个数：1find / -type f | wc -l","categories":[],"tags":[]},{"title":"Mac OS X 快速复制（拷贝）文件（夹）路径","slug":"Mac-OS-X-快速复制（拷贝）文件（夹）路径","date":"2016-04-13T14:17:02.000Z","updated":"2017-11-22T08:56:29.000Z","comments":true,"path":"2016/04/13/Mac-OS-X-快速复制（拷贝）文件（夹）路径/","link":"","permalink":"http://yoursite.com/2016/04/13/Mac-OS-X-快速复制（拷贝）文件（夹）路径/","excerpt":"在使用Mac OS X的\b过程中，如果有一个文件所在的目录层次很深，想要拷贝文件路径是麻烦事儿。本文介绍一种通过Finder右键菜单项来复制文件路径的方法，如果哪个朋友有更好的方法麻烦告知，在此谢过！","text":"在使用Mac OS X的\b过程中，如果有一个文件所在的目录层次很深，想要拷贝文件路径是麻烦事儿。本文介绍一种通过Finder右键菜单项来复制文件路径的方法，如果哪个朋友有更好的方法麻烦告知，在此谢过！ 在Launchpad里启动Automator。 创建一个新的服务（Service）。选项如下图所示： \b最后保存为Copy Path： \b 这样就完成了Finder右键菜单项的制作，试试吧~ Reference: http://osxdaily.com/2013/06/19/copy-file-folder-path-mac-os-x/","categories":[],"tags":[{"name":"macOS","slug":"macOS","permalink":"http://yoursite.com/tags/macOS/"}]},{"title":"CocoaPods安装和使用教程","slug":"CocoaPods安装和使用教程","date":"2016-04-12T14:14:00.000Z","updated":"2017-11-22T08:57:09.000Z","comments":true,"path":"2016/04/12/CocoaPods安装和使用教程/","link":"","permalink":"http://yoursite.com/2016/04/12/CocoaPods安装和使用教程/","excerpt":"CocoaPods是什么？ 通常在开发iOS/OSX应用时，经常使用到一些第三方开源库，比如JSONKit，AFNetWorking，OpenSSL，Boost等。这些库下载、版本更新管理相当麻烦和费时，尤其是C/C++相关库，还需要编译，编译时还有各种各样的库依赖。那有没有类似于Python中的PIP/easy_install这样的包（库）管理工具呢？ 本文将介绍一个开发iOS/OSX时经常用到的包管理工具CocoaPods。 官方网址：https://cocoapods.org/","text":"CocoaPods是什么？ 通常在开发iOS/OSX应用时，经常使用到一些第三方开源库，比如JSONKit，AFNetWorking，OpenSSL，Boost等。这些库下载、版本更新管理相当麻烦和费时，尤其是C/C++相关库，还需要编译，编译时还有各种各样的库依赖。那有没有类似于Python中的PIP/easy_install这样的包（库）管理工具呢？ 本文将介绍一个开发iOS/OSX时经常用到的包管理工具CocoaPods。 官方网址：https://cocoapods.org/ 安装CocoaPods安装CocoaPods，需要使用Ruby环境，通常Mac OS X已经自带Ruby。在终端下运行如下命令： 1$ sudo gem install cocoapods 安装失败？是的，因为默认安装源被GFW了。这里需要更改成淘宝的源： 12gem sources --remove https://rubygems.org/ // 删除原来的gem sources -a https://ruby.taobao.org/ // 增加淘宝的源，这里注意淘宝已经废弃http的源，统一成了https 查看源： 12345gem sources -l *** CURRENT SOURCES *** https://ruby.taobao.org/ 现在执行： 1sudo gem install cocoapods 等一会，是不是安装成功了~ 使用CocoaPods首先搜索需要使用的库是否支持CocoaPods（这里以AFNetworking为例）： 这里可以看到很多个带有AFNetworking关键字的库，第一个是我们要找的。 接下来创建一个示例工程pod_demo，同时在工程文件pod_demo.xcodeproj同一目录下创建Podfile文本文件： 并输入如下内容： 12platform :osx, '10.9'pod 'AFNetworking', '~&gt; 2.6.3' 第一行解释： 因为示例工程是OSX平台的，所有platform是osx版本。如果是用于iOS，Platform是可以写成： 1platform :ios, '8.0' 在安装过程中会检测当前库版本是否适用于指定的系统版本，如果不适用，会报如下异常： \b不同的AFNetworking对应不同的系统版本【2】：\b第二行解释：‘&gt; 0.1’ 大于0.1的版本‘&gt;= 0.1’ 大于等于0.1的版本‘&lt; 0.1’ 小于0.1的版本‘&lt;= 0.1’ 小于等于0.1的版本‘~&gt; 0.1.2’ 0.1.2到0.2之间的版本，不包括0.2及\b更高版本‘~&gt; 0.1’ 0.1到1.0之间的版本，不包括1.0及更高版本‘~&gt; 0’ 0及更高版本，相当于所有版本 接下来终端切换到Podfile所在目录，安装库： 1pod install 这时你会发现目录下多了几个文件（夹）：pod_demo.xcworkspace、Podfile.lock、Pods，这些都是CocoaPods生成的。目录结构如下： \b\b上图是安装成功界面，请注意最后绿字那一行：关闭XCode，并打开pod_demo.xcworkspace。这时用XCode打开pod_demo.xcworkspace，在代码中就能正常使用AFNetworing库了。 注：使用CocoaPods安装库后，要打开xcworkspace而不是xcodeproj了。## 补充内容如果已经有Podfile，需要更新新版本，使用：1pod update Reference:https://cocoapods.org/https://github.com/AFNetworking/AFNetworking","categories":[],"tags":[]},{"title":"Mac OS X上开发和使用动态链接库/dylib/共享库","slug":"Mac-OS-X上开发和使用动态链接库-dylib-共享库","date":"2016-04-11T13:48:13.000Z","updated":"2017-11-22T08:57:56.299Z","comments":true,"path":"2016/04/11/Mac-OS-X上开发和使用动态链接库-dylib-共享库/","link":"","permalink":"http://yoursite.com/2016/04/11/Mac-OS-X上开发和使用动态链接库-dylib-共享库/","excerpt":"在OS X上开发应用通常会用到dylib动态链接库，使用XCode开发及调用一个dylib还是比较容易的，通常的做法使用dlopen（类似于Windows上的LoadLibrary）加载dylib，使用dlsym（类似GetProcAddress）找到导出接口，然后调用，最后dlclose（类似FreeLibrary）之即可。这个方法和Linux上使用共享库的方式是一样的，这里就不作介绍了。 本文介绍一种更加方便的方法，通过设置几个编译选项，运行时系统自动加载dylib，使用时只需要调用即可。以下是示例步骤。","text":"在OS X上开发应用通常会用到dylib动态链接库，使用XCode开发及调用一个dylib还是比较容易的，通常的做法使用dlopen（类似于Windows上的LoadLibrary）加载dylib，使用dlsym（类似GetProcAddress）找到导出接口，然后调用，最后dlclose（类似FreeLibrary）之即可。这个方法和Linux上使用共享库的方式是一样的，这里就不作介绍了。 本文介绍一种更加方便的方法，通过设置几个编译选项，运行时系统自动加载dylib，使用时只需要调用即可。以下是示例步骤。 一、创建dylib工程创建dylib工程dylib_demo。 二、参数选择这里以导出C++类接口为例。 三、配置编译选项可以在dylib的Build Phases里看到Installataion Diectory（INSTALL_PATH）这个选项，默认是/usr/local/lib。这个意思是指可执行程序在自动加载时去哪里找这个dylib。可以使用otool进行查看（如下图）。 第一行显示的就是dylib所在的路径：/usr/local/lib/libdylib_demo.dylib。这是系统目录，调用程序会去这个目录找。如果不把dylib拷贝到这个目录，程序将无法运行。发布一个程序时，还要将自用库拷贝到系统目录？这是不合理的。 这里将Installation Directory改成@loader_path/../Frameworks，以相对目录查找dylib。下图是otool显示。@loader_path的意思相对load这个dylib的模块所在的路径找dylib所在的目录。 Installation Directory (INSTALL_PATH) 详解： @executable_path 表示可执行程序所在的目录. 比如 /path/foo.app/Contents/MacOS/。 @loader_path 表示每一个被加载的 binary（包括App, dylib, framework等）所在的目录。 @rpath 和前面两个不同, 它只是一个保存着一个或多个路径的变量。在 app中设置 Runpath Search Paths（对应了@rpath）。 四、创建调用app创建名为caller_demo的app。 参数设置 五、设置链接到dylib在app的Build Phases的Link Binary With Libraries里增加刚刚创建的dylib。 如果列表里没有点击右下角的Add Other在目录里找。 也可以在Finder里拖拽dylib到Link Binary With Libraries里。 六、拷贝dylib至目标目录这里app包结构包结构里还没有这个dylib，运行时还是找不着。在Build Phases里点加号，新增Copy Files Phase，将dylib拷贝到Frameworks目录下，以便loader可以找到。 这里为什么是Frameworks目录，是因为设置INSTALL_PATH为@loader_path/../Frameworks。 也可以设置为其他目录，比如INSTALL_PATH为@loader_path/../dll，那Copy Files时，就要放到dll目录，如果下拉列表没有相应目录，可以下拉选Frameworks，然后在Subpath里填../dll这个相对路径，XCode会自动创建一个Frameworks同级目录dll。 \b \b \b 七、调用比如在AppDelegate.m文件里调用，因为是使用C++类，所以要将文件扩展名改为.mm，如果是使用标准C、ObjC接口，则不用改。 八、结语可以看到，以上方法使用比较方便，在开发过程中配置好XCode，一键编译。 调用时可以像静态库一样使用，省时省力。 Reference: http://www.tanhao.me/pieces/1361.html/ https://wincent.com/wiki/@executable_path,_@load_path_and_@rpath","categories":[],"tags":[{"name":"macOS","slug":"macOS","permalink":"http://yoursite.com/tags/macOS/"}]},{"title":"基于腾讯云自建Blog-WordPress+CentOS+Nginx","slug":"基于腾讯云自建Blog-WordPress-CentOS-Nginx","date":"2016-04-07T13:13:30.000Z","updated":"2017-11-22T08:58:15.000Z","comments":true,"path":"2016/04/07/基于腾讯云自建Blog-WordPress-CentOS-Nginx/","link":"","permalink":"http://yoursite.com/2016/04/07/基于腾讯云自建Blog-WordPress-CentOS-Nginx/","excerpt":"","text":"搭建步骤 申请云服务器 设置云服务器安装组，打开80端口。如果要访问安装在云服务器的MySQL，还要打开3306端口； 参考【1】安装Nginx/MySQL/PHP。如果使用香港云数据库CDB，无法在外网登录管理； 参考【2】安装WordPress； 因为GWF的原因，基于WordPress的网站加载比较慢，这里推荐两个插件： Google字体相关：Useso take over Google（重定向到360网站卫士的镜像）； Gravatar相关：WP-DuoShuo-Gravatar（重写向到多说的镜像）。 固定链接设置【3】。如果是使用默认固定链接，可以不设置。 接下来就可以愉快的写作了。 Reference: 软件安装：https://www.digitalocean.com/community/tutorials/how-to-install-linux-nginx-mysql-php-lemp-stack-on-centos-6 WordPress安装：https://www.digitalocean.com/community/tutorials/how-to-install-wordpress-with-nginx-on-centos-6–2 固定链接设置：http://nginxlibrary.com/wordpress-permalinks/","categories":[],"tags":[]}]}